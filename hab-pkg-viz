#!/bin/bash
#
# # Usage
#
# ```
# hab-pkg-viz [PKG]
# ```
#
# # Synopsis
#
# Habitat Package Dependency Visualizer
#
# Given a Habitat package identifier, create a Graphviz .dot representation of
# packages' dependencies.
#
# To view the output on a Mac, assuming the `dot` program is installed:
#
#     hab-pkg-viz core/myapp | dot -Tpng | open -f -a Preview.app
#
# # License and Copyright
# ```
# Copyright: Copyright (c) 2016 Nathan L Smith, Inc.
# License: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ```

# The current version
version=0.1.0
# The author of this program
author="Nathan L Smith <smith@chef.io>"
# The short version of the program name which is used in logging output
program=$(basename "$0")


# Fail if there are any unset variables
set -u

# If the variable `$DEBUG` is set, then print the shell commands as we execute.
if [ -n "${DEBUG:-}" ]; then
  set -x
  export DEBUG
fi

# ## Help
# **Internal** Prints help
print_help() {
  printf -- "$program $version
  $author
  Habitat Package Visualizer - Create dependency graphs for Habitat packages
  USAGE:
    $program [PKG]
    "
}

# **Internal** Exit the program with an error message and a status code.
#
# ```sh
# exit_with "Something bad went down" 55
# ```
exit_with() {
  case "${TERM:-}" in
    *term | xterm-* | rxvt | screen | screen-*)
      printf -- "\033[1;31mERROR: \033[1;37m$1\033[0m\n"
      ;;
    *)
      printf -- "ERROR: $1\n"
      ;;
  esac
  exit "$2"
}

# DEPS for run time dependencies; BUILD_DEPS for build dependencies.
#
# The default is DEPS. If you set it to BUILD_DEPS with an environment variable,
# you may not get a complete graph if not all build dependency packages
# are installed.
HAB_PKG_VIZ_DEPS_FILE="${DEPS_FILE:-DEPS}"

# `hab` is required
if ! command -v hab > /dev/null; then
  exit_with "The 'hab' command is required. It was not found." 1
fi 

# Make sure we have the correct arguments
if [[ -z "$@" ]]; then
  print_help
  exit_with "You must specify one or more Habitat packages to vizualize." 1
fi

# Check to see if package exists and get its identifier
initial_pkg_path="$(hab pkg path "$1")"
if [[ ! $? -eq 0 ]]; then
  exit_with "$1 could not be resolved as an installed package. Make sure it's a valid package identifier and is installed." 1
fi
initial_pkg_ident="$(cat "$initial_pkg_path/IDENT")"

write_deps() {
  local parent="$1"
  pkg_deps_path="$(hab pkg path "$parent")/$HAB_PKG_VIZ_DEPS_FILE"

  if [[ -f "$pkg_deps_path" ]]; then
    deps="$(cat "$pkg_deps_path")"
    for child in $deps; do
      printf "\t\"%s\" -> \"%s\";\n" "$parent" "$child"
      write_deps "$child"
    done
  fi
}

# Create the graph
#
# The call to `awk` removes duplicate entries
cat<<EOF | awk '!x[$0]++'
/* Generated by $program */
digraph "$initial_pkg_ident" {
$(write_deps "$initial_pkg_ident")
}
EOF
